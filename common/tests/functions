#!/bin/bash -e

set -o errexit
shopt -s nullglob

CIDFILE_DIR=$(mktemp --suffix=test_cid_files -d)

function cleanup() {
  info "Tests finished.. cleaning up.."

  for cidfile in $CIDFILE_DIR/* ; do
    container_cleanup $1
  done
  rmdir $CIDFILE_DIR

  if [[ -n $app ]]; then
    cleanup_app ${app}
  fi

  # Report whole test result
  if [ "$1" -eq 0 ] ; then
    info "All tests finished successfully."
  else
    info "ERROR: Function $2 failed in $3 on line $4"
    info "ERROR: Tests failed."
  fi

  return $1
}
trap 'cleanup $? $FUNCNAME $BASH_SOURCE $BASH_LINENO' EXIT SIGINT

container_cleanup() {
  set +e
  if [ -f $cid_file ]; then
    if container_exists $(cat $cid_file); then
      CONTAINER=$(cat $cid_file)

      info "Stopping container $CONTAINER..."
      docker stop $(cat $cid_file)

      #if [ $(docker inspect -f '{{.State.ExitCode}}' $CONTAINER) != "0" ]; then
      if [ ! -z "$1" -a "$1" != 0 ]; then
        info "Inspecting container $CONTAINER"
        container_inspect $CONTAINER

        info "Dumping logs for $CONTAINER"
        docker logs $CONTAINER
      fi
      docker rm -v $CONTAINER &>/dev/null
    else
      info "Nothing to clean up $CONTAINER"
    fi
    rm $cid_file
  else
    info "No cid_file to clean up $cid_file"
  fi
  set -e
}

cleanup_app () {
  set +e
  info "Cleaning up the test application image"
  if container_exists ${IMAGE_NAME}-testapp; then
    docker rmi -f ${IMAGE_NAME}-testapp
  fi
  set -e
}

wait_for_cid() {
  local max_attempts=10
  local sleep_time=1
  local attempt=1
  local result=1
  info "Waiting for application container to start $CONTAINER_ARGS ..."
  while [ $attempt -le $max_attempts ]; do
    [ -f $cid_file ] && [ -s $cid_file ] && break
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done
}

info() {
  echo -e "\n\e[1m[INFO] $@\e[0m\n"
}

container_inspect() {
  docker inspect $1
}

container_exists() {
  container_inspect $1 &>/dev/null
}

container_ip() {
  docker inspect --format="{{ .NetworkSettings.IPAddress }}" $(cat $cid_file)
}

container_port() {
  # Expects format 8080:http
  docker inspect --format "{{index .Config.Labels \"io.openshift.expose-services\"}}" $(cat $cid_file) | cut -d: -f1
}

container_logs() {
  docker logs $(cat $cid_file)
}

container_exec() {
  docker exec $(cat ${cid_file}) $1
}

test_container_command() {
  local run_cmd="$1"
  local expected="$2"

  info "Testing the command version"
  out=$(container_exec "$run_cmd")
  if ! echo $out | grep -q "${expected}"; then
    info "ERROR[exec "${run_cmd}"] Expected '${expected}', got '${out}'"
    return 1
  fi
}
